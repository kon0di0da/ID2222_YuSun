The homework can be done in a group of 2 students.
This assignment aims to understand distributed graph partitioning using gossip-based peer-to-peer techniques, such as JaBeJa described in [F. Rahimian, et al., JA-BE-JA: A Distributed Algorithm for Balanced Graph Partitioning, SASO2013 Download F. Rahimian, et al., JA-BE-JA: A Distributed Algorithm for Balanced Graph Partitioning, SASO2013.] Extended version: [F Rahimian et al., A distributed algorithm for large-scale graph partitioningLinks to an external site., ACM Transactions on Autonomous and Adaptive Systems (TAAS) 10 (2), 12]

This assignment consists of the following two tasks.

Task 1
In the first task, you are to implement the Ja-Be-Ja algorithm. We provide a scaffolding source code for Ja-Be-Ja simulation for the one-host-one-node model. The source code is available on GitHubLinks to an external site.. The simulator is written in Java. You need gnuplot, a portable command-line-driven graphing utility, to compile the results.

You can run the program using the run.sh ​script. Run ./run.sh -help to see all the possible command line parameters. All the sample graphs are stored in the ./graphs directory; use the 3elt, add20, and Facebook/Twitter graphs in your experiments. After running the experiment, the results are stored in the ./output ​directory. Use the plot.sh ​to visualize the results. plot.sh​ generates a graph.png file in the current directory.

>> ./compile.sh
>> ./run -graph ./graphs/3elt.graph
>>./plot .sh output/result
Image_002.jpg

To implement Ja-Be-Ja, you need to modify the JaBeJa.java class. All the methods you need to implement are marked with TODO tags. You must implement the sampleAndSwap(...) ​method and the findPartner(...) method described in the paper. This should be easy as all the supporting code is already implemented.

Task 2
In the second task, you will tweak different JaBeJa configurations to find the smallest edge cuts for the given graphs.

In this task, you are to analyze how the algorithm's performance is affected when different parameters are changed, especially the effect of simulated annealing. Currently, Ja-Be-Ja uses a linear function to decrease the temperature (lines 9 - 13 of the Ja-Be-Ja algorithm), and the temperature is multiplied by the cost function (line 26 of the Ja-Be-Ja algorithm). You will now analyze how changing the simulated annealing parameters, and the acceptance probability function affects the performance of Ja-Be-Ja.

First, you will implement a different simulated mechanism described hereLinks to an external site.. Observe how this change affects the rate of convergence. You can tweak various parameters. Remember that when using this method, the maximum initial temperature is 1.
You should notice that once the parameter T reaches its final value (that is, no more bad swaps are allowed), Ja-Be-Ja converges to an edge cut rapidly, and the edge cut does not change over time. You will investigate how the Ja-Be-Ja algorithm behaves when the simulated annealing is restarted after Ja-Be-Ja has converged. For example, if T is 2 and delta is 0.01, then after 200 rounds, the temperature will cool down to 1, and no more bad-swaps will be accepted. Ja-Be-Ja will converge soon after that. You can restart simulated-annealing again after 400 rounds. Experiment with different parameters and configurations to find lower edge cuts.
Sample graphs
All the sample graphs are stored in the ./graphs directory. Analyze the 3elt, add20, and Facebook/Twitter graphs in your experiments for both tasks.

The optional task for an extra bonus
Define your acceptance probability function or change the Ja-Be-Ja algorithm (to improve its performance) and evaluate how your changes affect the performance of graph partitioning.

Readings
F. Rahimian, A. H. Payberah, S. Girdzijauskas, M. Jelasity, and S. Haridi, JA-BE-JA: A Distributed Algorithm for Balanced Graph Partitioning Download JA-BE-JA: A Distributed Algorithm for Balanced Graph Partitioning, SASO2013, pp. 51-60.
F Rahimian, AH Payberah, S Girdzijauskas, M Jelasity, S Haridi, A distributed algorithm for large-scale graph partitioningLinks to an external site., ACM Transactions on Autonomous and Adaptive Systems (TAAS) 10 (2), 12
Submission, Presentation, and Demonstration
You upload your solution in a zip file to Canvas. To get the bonus, you should upload your solution before the deadline. Canvas records the submission time. A bonus will not be given if you miss the deadline. Your homework solution must include

Source code;
Report (in PDF) with the analysis of the given graphs. Analyze the 3elt, add20, Facebook/Twitter graphs. ​In your report, discuss how your changes affect the performance of the algorithm in terms of
a) Number of swaps;
b) Time to converge;
c) Minimum edge cut observed.
The report should also include info on how long it took your implementation to compute each set of the results.
Please do not include the dataset files as part of your submission; instead, make sure there are clear instructions and reachable links for obtaining the dataset are included in your report.
Within a week after the homework deadline, you present and demonstrate your homework on your laptop to a course instructor. A link to the time-slot pool will be provided under Syllabus to book a time slot for the presentation.

Grading and Bonus Policy
The grade for homework is pass/fail. If you submit your solution on time and it is accepted, you will get up to 3 bonus points on the ID2222 exam. Some homework assignments include an optional task for an extra bonus. The total bonus can be reduced for minor errors and inefficiency of your solution.  A bonus will not be given if you miss the deadline.
ou can run the program using the run.sh ​script. Run ./run.sh -help to see all the possible command line parameters. All the sample graphs are stored in the ./graphs directory; use the 3elt, add20, and Facebook/Twitter graphs in your experiments. After running the experiment, the results are stored in the ./output ​directory. Use the plot.sh ​to visualize the results. plot.sh​ generates a graph.png file in the current directory.

>> ./compile.sh
>> ./run -graph ./graphs/3elt.graph
>>./plot .sh output/result
Image_002.jpg

To implement Ja-Be-Ja, you need to modify the JaBeJa.java class. All the methods you need to implement are marked with TODO tags. You must implement the sampleAndSwap(...) ​method and the findPartner(...) method described in the paper. This should be easy as all the supporting code is already implemented.

Task 2
In the second task, you will tweak different JaBeJa configurations to find the smallest edge cuts for the given graphs.

In this task, you are to analyze how the algorithm's performance is affected when different parameters are changed, especially the effect of simulated annealing. Currently, Ja-Be-Ja uses a linear function to decrease the temperature (lines 9 - 13 of the Ja-Be-Ja algorithm), and the temperature is multiplied by the cost function (line 26 of the Ja-Be-Ja algorithm). You will now analyze how changing the simulated annealing parameters, and the acceptance probability function affects the performance of Ja-Be-Ja.

First, you will implement a different simulated mechanism described hereLinks to an external site.. Observe how this change affects the rate of convergence. You can tweak various parameters. Remember that when using this method, the maximum initial temperature is 1.
You should notice that once the parameter T reaches its final value (that is, no more bad swaps are allowed), Ja-Be-Ja converges to an edge cut rapidly, and the edge cut does not change over time. You will investigate how the Ja-Be-Ja algorithm behaves when the simulated annealing is restarted after Ja-Be-Ja has converged. For example, if T is 2 and delta is 0.01, then after 200 rounds, the temperature will cool down to 1, and no more bad-swaps will be accepted. Ja-Be-Ja will converge soon after that. You can restart simulated-annealing again after 400 rounds. Experiment with different parameters and configurations to find lower edge cuts.
Sample graphs
All the sample graphs are stored in the ./graphs directory. Analyze the 3elt, add20, and Facebook/Twitter graphs in your experiments for both tasks.

The optional task for an extra bonus
Define your acceptance probability function or change the Ja-Be-Ja algorithm (to improve its performance) and evaluate how your changes affect the performance of graph partitioning.

Readings
F. Rahimian, A. H. Payberah, S. Girdzijauskas, M. Jelasity, and S. Haridi, JA-BE-JA: A Distributed Algorithm for Balanced Graph Partitioning Download JA-BE-JA: A Distributed Algorithm for Balanced Graph Partitioning, SASO2013, pp. 51-60.
F Rahimian, AH Payberah, S Girdzijauskas, M Jelasity, S Haridi, A distributed algorithm for large-scale graph partitioningLinks to an external site., ACM Transactions on Autonomous and Adaptive Systems (TAAS) 10 (2), 12
Submission, Presentation, and Demonstration
You upload your solution in a zip file to Canvas. To get the bonus, you should upload your solution before the deadline. Canvas records the submission time. A bonus will not be given if you miss the deadline. Your homework solution must include

Source code;
Report (in PDF) with the analysis of the given graphs. Analyze the 3elt, add20, Facebook/Twitter graphs. ​In your report, discuss how your changes affect the performance of the algorithm in terms of
a) Number of swaps;
b) Time to converge;

raph "example1.dat Download example1.dat" -- This data set was prepared by Ron Burt. He dug out the 1966 data collected by Coleman, Katz, and Menzel on medical innovation. They collected data from physicians in four towns in Illinois: Peoria, Bloomington, Quincy, and Galesburg.
A synthetic graph "example2.dat Download example2.dat"
You can choose any language to implement the algorithm. Using Matlab/Octave, the algorithm can be implemented in a few lines of code Matlab/Octave. By following this link, you can obtain a student license for Matlab as a KTH student. Find below a short Matlab tutorial for this homework.

You should read the above paper first, as implementing the algorithm should be trivial. As a warm-up task, you should first compute the eigenvectors and eigenvalues of a set of graphs and find out how many communities these graphs have. You will find it trivial if you are already familiar with Matlab.

Readings
Lecture
Cluster Multiple Eigenvector, i.e., K-eigenvector Algorithm (Ng et al.,’01Links to an external site.)
Submission, Presentation, and Demonstration
You upload your solution in a zip file to Canvas. To get a bonus, you should upload your solution before the deadline. Canvas records the submission time. A bonus will not be given if you miss the deadline. Your homework solution must include

Source code (with comments);
Report (in PDF) with a short description of your solution, and graph analysis.
In case you work in Jupyter notebook, you can include the report contents there as well, in which case submission of a separate PDF would not be required.
Please do not include the dataset files as part